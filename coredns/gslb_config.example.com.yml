records:
  # Define a GSLB record for webapp.gslb.example.com with failover mode 
  # between wepapp1 and webapp2 with HTTP health checks
  webapp.gslb.example.com.:
    owner: "admin"  # Record owner
    description: "Dynamic DNS responses based on backend status"
    mode: "failover"  # Failover mode ensures traffic is routed to the highest priority available backend
    record_ttl: 30  # Time-to-live for the DNS record
    scrape_interval: 10s  # Interval for health checks
    scrape_retries: 1  # Number of retries for health checks
    scrape_timeout: 5s  # Timeout for health check responses
    backends:
    - address: "172.16.0.10"
      description: "webapp10"  # Description of the backend location or purpose
      location: "eu-west-1"
      enable: true  # Indicates whether this backend is enabled
      priority: 1  # Priority level (lower number = higher priority)
      healthchecks:
        - type: http
          params:
            port: 443
            uri: "/"  # URI to request
            method: "GET"  # HTTP method
            host: "localhost"  # Host header for the request
            headers:  # Additional HTTP headers (can add headers as key-value pairs if needed)
            timeout: 5s  # Timeout for the HTTP request
            expected_code: 200  # Expected HTTP status code
            expected_body: ""  # Expected response body (empty means no body validation)
            enable_tls: true  # Use TLS for the health check
            skip_tls_verify: true  # Skip TLS certificate validation
    - address: "172.16.0.11"
      description: "webapp11"  # Description of the backend location or purpose
      location: "eu-west-2"
      enable: true  # Indicates whether this backend is enabled
      priority: 2  # Priority level (lower number = higher priority)
      healthchecks:
        - type: http
          params:
            port: 443
            uri: "/"  # URI to request
            method: "GET"  # HTTP method
            host: "localhost"  # Host header for the request
            headers:  # Additional HTTP headers (can add headers as key-value pairs if needed)
            timeout: 5s  # Timeout for the HTTP request
            expected_code: 200  # Expected HTTP status code
            expected_body: ""  # Expected response body (empty means no body validation)
            enable_tls: true  # Use TLS for the health check
            skip_tls_verify: true  # Skip TLS certificate validation
        - type: icmp
          params:
            timeout: 2s  # Timeout for the ICMP request
            count:  3  # Number of ICMP requests to send

  # Define a GSLB record for webapp2.gslb.example.com with GeoIP mode 
  webapp-geoip-region.gslb.example.com.:
    owner: "admin"
    description: "GeoIP-based routing between Paris and London backends"
    mode: "geoip"  # GeoIP mode: routes clients to the closest backend by location
    record_ttl: 30
    scrape_interval: 10s
    scrape_retries: 1
    scrape_timeout: 5s
    backends:
    - address: "172.16.0.10"
      description: "webapp10"
      location_countries: [ ]
      location_cities: [ ]
      location_asns: [ ]
      location_custom: ["eu-west-1"]
      enable: true
      priority: 1
      healthchecks:
        - type: http
          params:
            port: 443
            uri: "/"
            method: "GET"
            host: "localhost"
            headers:
            timeout: 5s
            expected_code: 200
            expected_body: ""
            enable_tls: true
            skip_tls_verify: true
    - address: "172.16.0.11"
      description: "webapp11"
      location_countries: [ ]
      location_cities: [ ]
      location_asns: [ ]
      location_custom: ["eu-west-2"]
      enable: true
      priority: 2
      healthchecks:
        - type: http
          params:
            port: 443
            uri: "/"
            method: "GET"
            host: "localhost"
            headers:
            timeout: 5s
            expected_code: 200
            expected_body: ""
            enable_tls: true
            skip_tls_verify: true

  # Define a GSLB record for webapp2.gslb.example.com with GeoIP mode by country
  webapp-geoip-country.gslb.example.com.:
    owner: "admin"
    description: "GeoIP-based routing by country (using MaxMind GeoLite2-Country.mmdb)"
    mode: "geoip"
    record_ttl: 30
    scrape_interval: 10s
    scrape_retries: 1
    scrape_timeout: 5s
    backends:
    - address: "172.16.0.10"
      description: "webapp10"
      location_countries: [ "FR" ]
      location_cities: [ ]
      location_asns: [ ]
      location_custom: [ ]
      enable: true
      priority: 1
      healthchecks:
        - type: http
          params:
            port: 443
            uri: "/"
            method: "GET"
            host: "localhost"
            headers:
            timeout: 5s
            expected_code: 200
            expected_body: ""
            enable_tls: true
            skip_tls_verify: true
    - address: "172.16.0.11"
      description: "webapp11"
      location_countries: [ "US" ]
      location_cities: [ ]
      location_asns: [ ]
      location_custom: [ ]
      enable: true
      priority: 2
      healthchecks:
        - type: http
          params:
            port: 443
            uri: "/"
            method: "GET"
            host: "localhost"
            headers:
            timeout: 5s
            expected_code: 200
            expected_body: ""
            enable_tls: true
            skip_tls_verify: true

  # Define a GSLB record for webapp-grpc.gslb.example.com
  webapp-grpc.gslb.example.com.:
    owner: "admin"
    description: "gRPC health checks for webapp12"
    mode: "geoip"
    record_ttl: 30
    scrape_interval: 10s
    scrape_retries: 1
    scrape_timeout: 5s
    backends:
    - address: "172.16.0.12"
      description: "webapp12"
      location_countries: [ ]
      location_cities: [ ]
      location_asns: [ ]
      location_custom: [ ]
      enable: true
      priority: 1
      healthchecks:
      - type: grpc
        params:
          port: 9090
          service: ""
          timeout: 5s 

  webapp-lua.gslb.example.com.:
    owner: "admin"
    description: "Backend with Lua healthcheck (JSON via http_get + json_decode)"
    mode: "failover"
    record_ttl: 30
    scrape_interval: 10s
    scrape_retries: 1
    scrape_timeout: 5s
    backends:
      - address: "172.16.0.10"
        priority: 1
        enable: true
        healthchecks:
          - type: lua
            params:
              timeout: 5s
              script: |
                local body = http_get("https://" .. backend.address .. ":443/api/health", 5, "", "", false)
                if not body or body == "" then
                  print("DEBUG: http_get failed or empty body for " .. backend.address)
                  return false
                end

                local health = json_decode(body)
                if not health then
                  print("DEBUG: json_decode failed for body: " .. tostring(body))
                  return false
                end

                if health.status ~= "green" then
                  print("DEBUG: health.status is not green: " .. tostring(health.status))
                  return false
                end

                if not health.number_of_nodes or health.number_of_nodes < 3 then
                  print("DEBUG: number_of_nodes is too low: " .. tostring(health.number_of_nodes))
                  return false
                end

                return true