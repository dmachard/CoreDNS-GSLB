networks:
  gslb_net:
    driver: bridge
    ipam:
      config:
        - subnet: 172.16.0.0/24

services:
  # create coredns with GSLB plugin
  coredns_gslb:
    build:
      context: .
      dockerfile: ./Dockerfile
    container_name: coredns
    ports:
      - "8053:53/udp"
      - "8053:53/tcp"
      - "9153:9153/tcp"
      - "8080:8080/tcp"
    volumes:
      - ./tests/Corefile:/Corefile
      - ./tests/db.gslb.example.com:/db.gslb.example.com
      - ./tests/db.app-x.gslb.example.com.yml:/coredns/db.app-x.gslb.example.com.yml
      - ./tests/db.app-y.gslb.example.com.yml:/coredns/db.app-y.gslb.example.com.yml
      - ./tests/location_map.yml:/coredns/location_map.yml
      - ./tests/GeoLite2-Country.mmdb:/coredns/GeoLite2-Country.mmdb
      - ./tests/GeoLite2-City.mmdb:/coredns/GeoLite2-City.mmdb
      - ./tests/GeoLite2-ASN.mmdb:/coredns/GeoLite2-ASN.mmdb
    command: -conf /Corefile
    environment:
      - COREDNS_LOG_LEVEL=debug
    networks:
      gslb_net:
        ipv4_address: 172.16.0.9

  # create webapp to simulate web application to monitor
  webapp10:
    build:
      context: ./tests/webapp
    ports:
      - "10443:443"
    environment:
      - APP_NAME=WebApplication10
    networks:
      gslb_net:
        ipv4_address: 172.16.0.10

  # create webapp to simulate a second web application to monitor
  webapp11:
    build:
      context: ./tests/webapp
    ports:
      - "11443:443"
    environment:
      - APP_NAME=WebApplication11
    networks:
      gslb_net:
        ipv4_address: 172.16.0.11

  # create webapp to simulate a third web application with gRPC health endpoint
  webapp12:
    build:
      context: ./tests/webapp
    ports:
      - "12990:9090"  # Expose gRPC port
    environment:
      - APP_NAME=WebApplication12
      - ENABLE_GRPC_HEALTH=1  # Custom env to enable gRPC health endpoint in the app (implement in webapp if needed)
    networks:
      gslb_net:
        ipv4_address: 172.16.0.12

  prometheus:
    image: prom/prometheus:v3.4.2
    ports:
      - "9090:9090/tcp"
    volumes:
      - prometheus_data:/prometheus
      - ./tests/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=365d'
      - '--web.enable-lifecycle'
    networks:
      gslb_net:
        ipv4_address: 172.16.0.50

  grafana:
    image: grafana/grafana:12.0.2
    ports:
      - "3000:3000/tcp"
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true      
    volumes:
      - grafana_data:/var/lib/grafana
      - ./tests/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml
      - ./tests/dashboards.yml:/etc/grafana/provisioning/dashboards/dashboards.yml
      - ./dashboards:/var/lib/grafana/dashboards
    networks:
      gslb_net:
        ipv4_address: 172.16.0.51


volumes:
  prometheus_data:
  grafana_data: